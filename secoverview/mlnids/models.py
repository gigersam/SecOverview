from django.db import models

class RfPrediction(models.Model):
    label = models.CharField(max_length=50, unique=True)  # e.g., "Benign", "Malicious"
    description = models.TextField(blank=True, null=True)  # Optional extra info

    def __str__(self):
        return self.label

class NetworkFlow(models.Model):
    flow_key = models.CharField(max_length=255, null=True, blank=True)
    src_ip = models.GenericIPAddressField(null=True, blank=True)
    dst_ip = models.GenericIPAddressField(null=True, blank=True)
    src_port = models.IntegerField(null=True, blank=True)
    dst_port = models.IntegerField(null=True, blank=True)
    protocol = models.IntegerField(null=True, blank=True)
    flow_start_ts = models.FloatField(null=True, blank=True)
    flow_last_ts = models.FloatField(null=True, blank=True)
    flow_duration = models.FloatField(null=True, blank=True)
    fwd_pkts_tot = models.IntegerField(null=True, blank=True)
    bwd_pkts_tot = models.IntegerField(null=True, blank=True)
    tot_pkts = models.IntegerField(null=True, blank=True)
    fwd_bytes_tot = models.BigIntegerField(null=True, blank=True)
    bwd_bytes_tot = models.BigIntegerField(null=True, blank=True)
    tot_bytes = models.BigIntegerField(null=True, blank=True)
    fwd_pkt_len_min = models.FloatField(null=True, blank=True)
    fwd_pkt_len_max = models.FloatField(null=True, blank=True)
    fwd_pkt_len_mean = models.FloatField(null=True, blank=True)
    fwd_pkt_len_std = models.FloatField(null=True, blank=True)
    bwd_pkt_len_min = models.FloatField(null=True, blank=True)
    bwd_pkt_len_max = models.FloatField(null=True, blank=True)
    bwd_pkt_len_mean = models.FloatField(null=True, blank=True)
    bwd_pkt_len_std = models.FloatField(null=True, blank=True)
    flow_pkt_len_min = models.FloatField(null=True, blank=True)
    flow_pkt_len_max = models.FloatField(null=True, blank=True)
    flow_pkt_len_mean = models.FloatField(null=True, blank=True)
    flow_pkt_len_std = models.FloatField(null=True, blank=True)
    avg_pkt_size = models.FloatField(null=True, blank=True)
    fwd_iat_min = models.FloatField(null=True, blank=True)
    fwd_iat_max = models.FloatField(null=True, blank=True)
    fwd_iat_mean = models.FloatField(null=True, blank=True)
    fwd_iat_std = models.FloatField(null=True, blank=True)
    bwd_iat_min = models.FloatField(null=True, blank=True)
    bwd_iat_max = models.FloatField(null=True, blank=True)
    bwd_iat_mean = models.FloatField(null=True, blank=True)
    bwd_iat_std = models.FloatField(null=True, blank=True)
    flow_iat_min = models.FloatField(null=True, blank=True)
    flow_iat_max = models.FloatField(null=True, blank=True)
    flow_iat_mean = models.FloatField(null=True, blank=True)
    flow_iat_std = models.FloatField(null=True, blank=True)
    fwd_header_len = models.BigIntegerField(null=True, blank=True)
    bwd_header_len = models.BigIntegerField(null=True, blank=True)
    fwd_seg_size_avg = models.FloatField(null=True, blank=True)
    bwd_seg_size_avg = models.FloatField(null=True, blank=True)
    pkts_per_sec = models.FloatField(null=True, blank=True)
    bytes_per_sec = models.FloatField(null=True, blank=True)
    fwd_PSH_flags = models.IntegerField(null=True, blank=True)
    bwd_PSH_flags = models.IntegerField(null=True, blank=True)
    fwd_URG_flags = models.IntegerField(null=True, blank=True)
    bwd_URG_flags = models.IntegerField(null=True, blank=True)
    SYN_flag_cnt = models.IntegerField(null=True, blank=True)
    FIN_flag_cnt = models.IntegerField(null=True, blank=True)
    RST_flag_cnt = models.IntegerField(null=True, blank=True)
    ACK_flag_cnt = models.IntegerField(null=True, blank=True)
    PSH_flag_cnt = models.IntegerField(null=True, blank=True)
    URG_flag_cnt = models.IntegerField(null=True, blank=True)
    down_up_ratio = models.FloatField(null=True, blank=True)
    init_win_bytes_fwd = models.IntegerField(null=True, blank=True)
    init_win_bytes_bwd = models.IntegerField(null=True, blank=True)
    rf_prediction = models.ForeignKey(RfPrediction, on_delete=models.SET_NULL, null=True)
    rf_confidence = models.FloatField(null=True, blank=True)
    if_anomaly_score = models.FloatField(null=True, blank=True)
    if_is_anomaly = models.BooleanField(null=True, blank=True)
    false_positiv = models.BooleanField(default=False)
    
    def __str__(self):
        return f"{self.flow_key}, src_ip: {self.src_ip}, dst_ip: {self.dst_ip}, src_port: {self.src_port}, dst_port: {self.dst_port}, protocol: {self.protocol}, rf_confidence: {self.rf_confidence}, if_anomaly_score: {self.if_anomaly_score}, if_is_anomaly: {self.if_is_anomaly}, duration: {self.flow_duration}, total_packets: {self.tot_pkts}, total_bytes: {self.tot_bytes}"
